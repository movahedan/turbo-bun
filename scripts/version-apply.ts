#!/usr/bin/env bun

import { $ } from "bun";
import { EntityPackageJson, EntityTag } from "./entities";
import { colorify } from "./shell/colorify";
import {
	createScript,
	type InferArgs,
	type ScriptConfig,
	validators,
} from "./shell/create-scripts";

const scriptConfig = {
	name: "Version Apply",
	description: "Create git version tags and commit version changes",
	usage: "bun run version-apply.ts [options]",
	examples: [
		"bun run version-apply.ts",
		"bun run version-apply.ts --message 'Release version 1.2.3'",
		"bun run version-apply.ts --no-push",
	],
	options: [
		{
			short: "-m",
			long: "--message",
			description: "Tag message",
			required: false,
			validator: validators.nonEmpty,
		},
		{
			short: "-n",
			long: "--no-push",
			description: "Don't push tag to remote after creation",
			required: false,
			defaultValue: false,
			validator: validators.boolean,
		},
	],
} as const satisfies ScriptConfig;

export const versionApply = createScript(scriptConfig, async function main(args, xConsole) {
	const version = await EntityPackageJson.getVersion("root");

	if (args["dry-run"]) {
		xConsole.log(colorify.yellow("üîç Dry run mode - would execute:"));
		xConsole.log(colorify.gray(`  ‚Ä¢ Commit version changes for ${version}`));
		xConsole.log(colorify.gray(`  ‚Ä¢ Create tag v${version}`));
		if (!args["no-push"]) {
			xConsole.log(colorify.gray("  ‚Ä¢ Push tag to remote"));
		}
		return;
	}

	await commitVersionChanges(xConsole);
	await createTag(version, args, xConsole);

	xConsole.log(colorify.green("‚úÖ Version apply operation completed successfully!"));
});

async function createTag(
	version: string,
	args: InferArgs<typeof scriptConfig>,
	xConsole: typeof console,
): Promise<void> {
	const tagName = EntityTag.toTag(version);
	xConsole.info(`üè∑Ô∏è Creating tag: ${tagName}`);

	try {
		await EntityTag.createVersionTag(version, {
			message: args.message || `Release version ${version}`,
			force: false,
			dryRun: false,
		});

		xConsole.log(`‚úÖ Created tag: ${tagName}`);

		if (!args["no-push"]) {
			await EntityTag.pushVersionTag(tagName);
			xConsole.log(`‚úÖ Pushed tag to remote: ${tagName}`);
		} else {
			xConsole.log(colorify.yellow("‚ö†Ô∏è Skipping push (--no-push specified)"));
		}
	} catch (error) {
		throw new Error(
			`Failed to create tag ${tagName}: ${error instanceof Error ? error.message : String(error)}`,
		);
	}
}

async function commitVersionChanges(xConsole: typeof console): Promise<void> {
	xConsole.info("üíæ Committing version changes...");

	xConsole.log("üìÅ Adding all changes...");
	await $`git add .`;
	const statusResult = await $`git status --porcelain`.nothrow();
	const hasChanges = statusResult.text().trim() !== "";

	if (!hasChanges) {
		xConsole.log(colorify.yellow("‚ö†Ô∏è No changes to commit"));
		return;
	}

	const packageJson = await Bun.file("package.json").json();
	const version = packageJson.version;
	const defaultMessage = `release: ${version}

- Automated version bump
- Updated changelogs
- Generated by version management system`;

	const commitMessage = defaultMessage;

	xConsole.log("üìù Commit message:");
	xConsole.log(commitMessage);

	await $`git commit -m "${commitMessage}"`;

	xConsole.log(colorify.green(`‚úÖ Successfully committed version ${version} changes`));
	const commitHash = await $`git rev-parse --short HEAD`.text();
	xConsole.log(`üè∑Ô∏è Commit hash: ${commitHash.trim()}`);
}

if (import.meta.main) {
	versionApply();
}
